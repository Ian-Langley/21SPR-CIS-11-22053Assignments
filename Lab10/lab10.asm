;LCRNG
;Uses an input seed of 1 - 32766 at x3100 to create a random number using mod. Returns 20 random numbers in the interval

		.ORIG X3000
		LD R2, A		;LOAD A TO R2
		LD R3, M		;LOAD M TO R3
		JSR DIV			;DIVIDE
		ST R4, Q		;STORE Q IN R4
		ST R5, R		;STORE R IN R5
LOOP
		LD R3, X		;LOAD X INTO R3
		LD R2, Q		;LOAD Q INTO R2
		JSR DIV			;DIVIDE X BY Q
		ST R4, XDIVQ		;STORE WHOLE VALUE DIVISION TO XDIVQ
		ST R5, XMODQ		;STORE WHOLE VALUE REMAINDER TO XMODQ
		LD R1, A
		LD R2, XMODQ
		JSR MULT		;MULTIPLY
		ADD R4, R3, X0		;R4 = A * XMODQ
		LD R1, R		;LOAD R TO R1
		LD R2, XDIVQ		;LOAD XDIVQ INTO R2
		JSR MULT		;MULTIPLY R BY XDIVQ
		NOT R3, R3		
		ADD R3, R3, #1		;2'S COMP
		ADD R2, R4, R3		;R2 = a * XMODQ - R * XDIVQ
		BRzp SKIP		;IF X>=0 SKIP
		LD R1, M		;LOAD M INTO R1
		ADD R2, R2, R1		; R2 = R2 + R1
SKIP		ST R2, X		;STORE R2 TO X
		LD R6, BASE		;LOAD BASE
		LD R3, X		;LOAD X
STACK
		AND R2, R2, #0		;CLEAR R2
		ADD R2, R2, #10		;ADD 10 TO R2
		JSR DIV			;DIVIDE
		ADD R0, R5, #0		;PUT R5 IN R0
		JSR PUSH		;PUSH
		ADD R3, R4, #0		;PUT R4 IN R3
		BRp STACK		;IF POS REPEAT, ELSE KEEP GOIGN
UNSTACK					
		JSR ISEMPTY		;ISEMPTY
		BRp CONT		;IF POS GO TO CONT, ELSE KEEP GOING
		JSR POP			;POP SUBROUT
		JSR DECODE		;DECODE SUBROUT
		OUT			;
		BR UNSTACK		;UNCONDITIONAL BRANCH CAUSES REPEAT TILL POS
CONT
		LD R0, SPACE		;LOAD SPACE TO R0
		OUT
		LD R6, LC		;LOAD LC TO R6
		ADD R6, R6, #-1		
		ST R6, LC
		BRzp LOOP		;LOOP TILL NEG
		HALT

SPACE		.FILL #10
X		.FILL #100
A		.FILL #7
M		.FILL #32767
Q		.FILL #0
R		.FILL #0
XDIVQ		.FILL #0
XMODQ		.FILL #0
BASE 		.FILL X4000
LC		.FILL #20		;LOOP COUNTER

MULT	
		ADD R3, R3, #0
MLOOP	
		ADD R3, R3, R1
		ADD R2, R2, #-1
		BRp MLOOP		;REPEAT TILL 0
		RET
DIV
		ST R2, SAVE1
		ST R3, SAVE2
		AND R4, R4, X0
		NOT R2, R2
		ADD R2, R2, #1		;2'S COOMP
DLOOP
		AND R5, R5, X0		;CLEAR R5
		ADD R4, R4, #1		
		ADD R5, R3, X0		; R3 => R5
		ADD R3, R3, R2
		BRzp DLOOP		;if not < 0
		ADD R4, R4, #-1		
		RET

SAVE1		.FILL X0
SAVE2		.FILL X0

PUSH
		ADD R6, R6, #-1		;REDUCE CALL BY ONE
		STR R0, R6, #0		;STORE R6 TO R1
		RET
POP
		LDR R0, R6, #0
		ADD R6, R6, #1		;ADD 1 TO CALL
		RET
ISEMPTY	
		LD R0, EMPTY
		ADD R0, R6, R0
		BRz IS
		ADD R0,R0 #0
		RET
IS
		AND R0, R0 #0
		ADD R6, R6, #1
		RET

EMPTY		.FILL XC000

DECODE
		ADD R0, R0, #15
		ADD R0, R0, #15
		ADD R0, R0, #15
		ADD R0, R0, #3
		RET
		.END